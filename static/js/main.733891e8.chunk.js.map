{"version":3,"sources":["components/Navbar/index.jsx","components/ImageGrid/ducks.js","firebase.js","components/ImageGrid/Card/styled.js","components/ImageGrid/Card/index.jsx","components/ImageGrid/index.jsx","components/ImageGrid/thunks.js","components/Form/ducks.js","components/Form/index.jsx","components/Form/thunks.js","App.js","serviceWorker.js","store.js","index.js"],"names":["className","to","actionTypes","initialState","isFetching","isRemoving","images","err","actions","type","payload","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Image","styled","img","Tooltip","div","props","position","TooltipMessage","color","size","align","fontWeight","data","onRemove","href","onClick","id","alt","src","url","tooltipPosition","fontSize","textColor","textPosition","tooltip","connect","state","gridPage","dispatch","getImages","a","firestore","collection","get","then","querySnapshot","forEach","doc","push","toastr","success","toString","error","removeImage","delete","useEffect","_handleRemoveImage","map","item","Card","key","isPending","isUpdating","imageUploadData","addImage","add","getImage","updateImage","update","useState","setTooltip","setTooltipPosition","setTextPosition","image","setImage","setFontSize","setTextColor","history","useHistory","useParams","imageData","_handleSubmit","length","action","onChange","e","file","FR","FileReader","readAsDataURL","addEventListener","result","_handleAddImage","target","files","placeholder","value","currentTarget","_handleSetTooltip","name","htmlFor","checked","min","parsedSize","parseInt","_handleSetFontSize","hex","App","timeOut","newestOnTop","preventDuplicates","getState","transitionIn","transitionOut","progressBar","closeOnToastrClick","Navbar","path","exact","Boolean","window","location","hostname","match","rootReducer","combineReducers","ReactDOM","render","StrictMode","store","middlewares","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sPAEe,oBACb,6BACE,yBAAKA,UAAU,6BACb,wBAAIA,UAAU,WACZ,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,eAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,QAAT,kB,wCCRJC,EACgB,qBADhBA,EAEgB,qBAFhBA,EAGc,mBAHdA,EAKkB,uBALlBA,EAMkB,uBANlBA,EAOgB,qBAKhBC,EAAe,CACnBC,YAAY,EACZC,YAAY,EACZC,OAAQ,KACRC,IAAK,MA6CMC,EACM,iBAAO,CACtBC,KAAMP,IAFGM,EAIM,SAACE,GAAD,MAAc,CAC7BD,KAAMP,EACNQ,YANSF,EAQI,SAACE,GAAD,MAAc,CAC3BD,KAAMP,EACNQ,YAVSF,EAaS,iBAAO,CACzBC,KAAMP,IAdGM,EAgBS,iBAAO,CACzBC,KAAMP,IAjBGM,EAmBO,SAACE,GAAD,MAAc,CAC9BD,KAAMP,I,wBCpEVS,IAASC,cAVsB,CAC7BC,OAAQ,0CACRC,WAAY,qCACZC,YAAa,4CACbC,UAAW,qBACXC,cAAe,iCACfC,kBAAmB,eACnBC,MAAO,8CAKMR,QAAf,E,q3BCfO,IAAMS,EAAQC,IAAOC,IAAV,KAKLC,EAAUF,IAAOG,IAAV,KAWH,SAACC,GAAD,OAAYA,EAAMC,SAAWD,EAAMC,SAAW,YAalDC,EAAiBN,IAAOG,IAAV,KAQhB,SAACC,GAAD,OAAYA,EAAMG,MAAQH,EAAMG,MAAQ,WACpC,SAACH,GAAD,OAAYA,EAAMI,KAAN,UAAgBJ,EAAMI,KAAtB,MAAiC,UAC5C,SAACJ,GAAD,OAAYA,EAAMK,MAAQL,EAAMK,MAAQ,UACvC,SAACL,GAAD,OAAYA,EAAMM,WAAaN,EAAMM,WAAa,SCrCpD,cAAyB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACtB,OACE,yBAAKjC,UAAU,0BACb,0BACEkC,KAAK,IACLlC,UAAU,mEAEV,uBAAGmC,QAAS,kBAAMF,EAASD,EAAKI,KAAKpC,UAAU,kBAA/C,WAIF,kBAAC,IAAD,CAAMC,GAAE,eAAU+B,EAAKI,KACrB,yBAAKpC,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACoB,EAAD,CAAOiB,IAAI,IAAIC,IAAKN,EAAKO,MAEzB,kBAAChB,EAAD,CAASG,SAAUM,EAAKQ,iBACtB,kBAACb,EAAD,CACEI,WAAY,IACZF,KAAMG,EAAKS,SACXb,MAAOI,EAAKU,UACZZ,MAAOE,EAAKW,cAEXX,EAAKY,eCKPC,qBARE,SAACC,GAAD,MAAY,CAC3Bd,KAAMc,EAAMC,aAEM,SAACC,GAAD,MAAe,CACjCC,UAAW,kBAAMD,ECtBjB,uCAAO,WAAOA,GAAP,eAAAE,EAAA,sEACC1C,IADD,cAECwB,EAAO,GAFR,kBAIGrB,EACHwC,YACAC,WAAW,UACXC,MACAC,MAAK,SAACC,GACLA,EAAcC,SAAQ,SAACC,GACrBzB,EAAK0B,KAAL,2BAAeD,EAAIzB,QAAnB,IAA2BI,GAAIqB,EAAIrB,YAVtC,uBAaGY,EAASxC,EAAwBwB,IAbpC,wBAcG2B,SAAOC,QAAQ,UAAW,6BAd7B,2EAgBGZ,EAASxC,EAAsB,KAAIqD,aAhBtC,yBAiBGF,SAAOG,MAAM,QAAS,KAAID,YAjB7B,0DAAP,wDDuBAE,YAAa,SAAC3B,GAAD,OAAQY,ECCI,SAACZ,GAC1B,8CAAO,WAAOY,GAAP,SAAAE,EAAA,sEACC1C,IADD,gCAGGG,EAASwC,YAAYC,WAAW,UAAUK,IAAIrB,GAAI4B,SAHrD,uBAKGhB,EAASxC,KALZ,uBAMGmD,SAAOC,QAAQ,UAAW,8BAN7B,0EAQGZ,EAASxC,EAAyB,KAAIqD,aARzC,yBASGF,SAAOG,MAAM,QAAS,KAAID,YAT7B,0DAAP,sDDF8BE,CAAY3B,QAG7BS,EA3BG,SAAC,GAAsC,IAApCI,EAAmC,EAAnCA,UAAWjB,EAAwB,EAAxBA,KAAM+B,EAAkB,EAAlBA,YACpCE,qBAAU,WACRhB,MACC,IAEH,IAAMiB,EAAkB,uCAAG,WAAO9B,GAAP,SAAAc,EAAA,sEACnBa,EAAY3B,GADO,uBAEnBa,IAFmB,2CAAH,sDAIxB,OACE,yBAAKjD,UAAU,OACZgC,EAAK1B,QACJ0B,EAAK1B,OAAO6D,KAAI,SAACC,GAAD,OACd,kBAACC,EAAD,CAAMpC,SAAUiC,EAAoBI,IAAKF,EAAKhC,GAAIJ,KAAMoC,W,iBEjB5DlE,EACe,oBADfA,EAEe,oBAFfA,EAGa,kBAHbA,EAKkB,uBALlBA,EAMkB,uBANlBA,EAOgB,qBAPhBA,EASe,oBATfA,EAUe,oBAVfA,EAWa,kBAKbC,GAAe,CACnBoE,WAAW,EACXC,YAAY,EACZpE,YAAY,EACZG,IAAK,MAuEMC,GACM,iBAAO,CACtBC,KAAMP,IAFGM,GAIM,iBAAO,CACtBC,KAAMP,IALGM,GAOI,SAACE,GAAD,MAAc,CAC3BD,KAAMP,EACNQ,YATSF,GAYM,iBAAO,CACtBC,KAAMP,IAbGM,GAeM,SAACE,GAAD,MAAc,CAC7BD,KAAMP,EACNQ,YAjBSF,GAmBI,SAACE,GAAD,MAAc,CAC3BD,KAAMP,EACNQ,YArBSF,GAwBS,iBAAO,CACzBC,KAAMP,IAzBGM,GA2BS,iBAAO,CACzBC,KAAMP,IA5BGM,GA8BO,SAACE,GAAD,MAAc,CAC9BD,KAAMP,EACNQ,Y,oBCgIWmC,sBAVE,SAACC,GAAD,MAAY,CAC3B2B,gBAAiB3B,EAAM4B,aAGL,SAAC1B,GAAD,MAAe,CACjC0B,SAAU,SAAC1C,GAAD,OAAUgB,EClPE,SAAChB,GACvB,8CAAO,WAAOgB,GAAP,SAAAE,EAAA,sEACCF,EAASxC,MADV,gCAIGG,KAASwC,YAAYC,WAAW,UAAUuB,IAAI3C,GAJjD,uBAKGgB,EAASxC,MALZ,uBAMGmD,SAAOC,QAAQ,UAAW,6BAN7B,0EAQGZ,EAASxC,GAAsB,KAAIqD,aARtC,yBASGF,SAAOG,MAAM,QAAS,KAAID,YAT7B,0DAAP,sDDiP6Ba,CAAS1C,KACtC4C,SAAU,SAACxC,GAAD,OAAQY,EClOI,SAACZ,GACvB,8CAAO,WAAOY,GAAP,eAAAE,EAAA,sEACCF,EAASxC,MADV,gCAIGG,KACHwC,YACAC,WAAW,UACXK,IAAIrB,GACJiB,MACAC,MAAK,SAACG,GAAD,OAAUzB,EAAOyB,EAAIzB,UAT1B,uBAWGgB,EAASxC,GAAwBwB,IAXpC,uBAYG2B,SAAOC,QAAQ,UAAW,sBAZ7B,0EAcGZ,EAASxC,GAAsB,KAAIqD,aAdtC,yBAeGF,SAAOG,MAAM,QAAS,KAAID,YAf7B,0DAAP,sDDiO2Be,CAASxC,KACpCyC,YAAa,SAAC7C,GAAD,OAAUgB,EC5ME,SAAChB,GAC1B,8CAAO,WAAOgB,GAAP,SAAAE,EAAA,sEACCF,EAASxC,MADV,gCAGGG,KAASwC,YAAYC,WAAW,UAAUK,IAAIzB,EAAKI,IAAI0C,OAAO9C,GAHjE,uBAIGgB,EAASxC,MAJZ,uBAKGmD,SAAOC,QAAQ,UAAW,qBAL7B,0EAOGZ,EAASxC,GAAyB,KAAIqD,aAPzC,yBAQGF,SAAOG,MAAM,QAAS,KAAID,YAR7B,0DAAP,sDD2MgCgB,CAAY7C,QAG/Ba,EApPF,SAAC,GAA0D,IAAxD6B,EAAuD,EAAvDA,SAAUD,EAA6C,EAA7CA,gBAAiBI,EAA4B,EAA5BA,YAAaD,EAAe,EAAfA,SAAe,EAEvCG,mBAAS,qBAF8B,mBAE9DnC,EAF8D,KAErDoC,EAFqD,OAGvBD,mBAAS,YAHc,mBAG9DvC,EAH8D,KAG7CyC,EAH6C,OAI7BF,mBAAS,QAJoB,mBAI9DpC,EAJ8D,KAIhDuC,EAJgD,OAK3CH,mBAAS,IALkC,mBAK9DI,EAL8D,KAKvDC,EALuD,OAMrCL,mBAAS,IAN4B,mBAM9DtC,EAN8D,KAMpD4C,EANoD,OAOnCN,mBAAS,OAP0B,mBAO9DrC,EAP8D,KAOnD4C,EAPmD,KAS/DC,EAAUC,cAGRpD,EAAOqD,cAAPrD,GACFsD,EAAYjB,EAAgBiB,UAElCzB,qBAAU,WACJ7B,GACFwC,EAASxC,KAEV,IAEH6B,qBAAU,WACJyB,GAAatD,IACf4C,EAAWU,EAAU9C,SACrBqC,EAAmBS,EAAUlD,iBAC7B0C,EAAgBQ,EAAU/C,cAC1ByC,EAASM,EAAUnD,KACnB8C,EAAYK,EAAUjD,UACtB6C,EAAaI,EAAUhD,cAExB,CAACgD,IAGJ,IAkCMC,EAAa,uCAAG,sBAAAzC,EAAA,2DAChBiC,EAAMS,OAAS,GAAKhD,EAAQgD,OAAS,IAAMxD,EAD3B,gCAEZsC,EAAS,CACbnC,IAAK4C,EACLvC,UACAJ,kBACAG,eACAD,YACAD,aARgB,uBAUZ8C,EAAQ7B,KAAK,KAVD,kCAWTtB,EAXS,kCAYZyC,EAAY,CAChBtC,IAAK4C,EACLvC,UACAJ,kBACAG,eACAD,YACAD,WACAL,OAnBgB,yBAqBZmD,EAAQ7B,KAAK,KArBD,iDAuBZC,SAAOG,MAAM,QAAS,iBAvBV,4CAAH,qDA0BnB,OACE,yBAAK9D,UAAU,OACb,yBAAKA,UAAU,OACb,wBAAIA,UAAU,UAAUoC,EAAK,UAAY,OAAzC,uBAEF,0BAAMpC,UAAU,UAAU6F,OAAO,KAC/B,yBAAK7F,UAAU,OACb,qCACA,yBAAKA,UAAU,0BACb,yBAAKA,UAAU,OACb,sCACA,2BACE8F,SAAU,SAACC,GAAD,OAxEA,SAACC,GACvB,GAAIA,EAAM,CACR,IAAMC,EAAK,IAAIC,WAEVF,GAAsB,eAAdA,EAAKvF,MAAwC,cAAduF,EAAKvF,MAC/CwF,EAAGE,cAAcH,GACjBC,EAAGG,iBACD,QACA,WACEhB,EAASa,EAAGI,WAEd,IAGF1C,SAAOG,MAAM,QAAS,kCA0DGwC,CAAgBP,EAAEQ,OAAOC,MAAM,KAChD/F,KAAK,UAGT,yBAAKT,UAAU,qBACb,2BACEA,UAAU,qBACVS,KAAK,OACLgG,YAAY,iBAMpB,yBAAKzG,UAAU,OACb,yBAAKA,UAAU,uBACb,2BACES,KAAK,OACLT,UAAU,WACV0G,MAAO9D,EACPkD,SAAU,SAACC,GAAD,OAzEI,SAACA,GACzBf,EAAWe,EAAEY,cAAcD,OAwEAE,CAAkBb,IACnCc,KAAK,kBAEP,2BAAOC,QAAQ,gBAAgB9G,UAAU,UAAzC,aAMJ,yBAAKA,UAAU,OACb,gDACA,2BACE,+BACE,2BACES,KAAK,QACLqF,SAAU,kBAAMb,EAAmB,eACnC8B,QAA6B,eAApBvE,IAEX,uCAGJ,2BACE,+BACE,2BACE/B,KAAK,QACLqF,SAAU,kBAAMb,EAAmB,WACnC8B,QAA6B,WAApBvE,IAEX,0CAGJ,2BACE,+BACE,2BACE/B,KAAK,QACLqF,SAAU,kBAAMb,EAAmB,aACnC8B,QAA6B,aAApBvE,IAEX,2CAIN,yBAAKxC,UAAU,OACb,yBAAKA,UAAU,uBACb,2BACE6G,KAAK,aACLpG,KAAK,SACLuG,IAAI,IACJN,MAAOjE,EACPzC,UAAU,WACV8F,SAAU,SAACC,GAAD,OAvHK,SAAClE,GAC1B,IAAMoF,EAAaC,SAASrF,GACXwD,EAAjB4B,EAAa,EAAgBA,EAA0B,IAqH5BE,CAAmBpB,EAAEQ,OAAOG,UAE/C,2BAAOI,QAAQ,aAAa9G,UAAU,UAAtC,0BAKJ,yBAAKA,UAAU,OACb,8CACA,2BACE,+BACE,2BACES,KAAK,QACLqF,SAAU,kBAAMZ,EAAgB,SAChC6B,QAA0B,SAAjBpE,IAEX,wCAGJ,2BACE,+BACE,2BACElC,KAAK,QACLqF,SAAU,kBAAMZ,EAAgB,WAChC6B,QAA0B,WAAjBpE,IAEX,0CAGJ,2BACE,+BACE,2BACElC,KAAK,QACLqF,SAAU,kBAAMZ,EAAgB,UAChC6B,QAA0B,UAAjBpE,IAEX,2CAKR,yBAAK3C,UAAU,OACb,0CACA,kBAAC,gBAAD,CAAe4B,MAAOc,EAAWoD,SA7JZ,SAAClE,GAC1B0D,EAAa1D,EAAMwF,SA8JjB,yBAAKpH,UAAU,cACb,4BACEA,UAAU,yCACVS,KAAK,SACL0B,QAASwD,GAHX,SAME,uBAAG3F,UAAU,wBAAb,cE/LKqH,OApCf,WACE,OACE,oCACE,kBAAC,IAAD,CACEC,QAAS,IACTC,aAAa,EACbC,mBAAiB,EACjB9F,SAAS,cACT+F,SAAU,SAAC3E,GAAD,OAAWA,EAAMa,QAC3B+D,aAAa,SACbC,cAAc,UACdC,aAAW,EACXC,oBAAkB,IAEpB,kBAAC,IAAD,KACE,kBAACC,EAAD,MACA,yBAAK9H,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO+H,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,QACV,kBAAC,GAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,YAAYC,OAAK,GAC3B,kBAAC,GAAD,aCvBIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCCPAC,GAAcC,2BAAgB,CAClC7D,SLYa,WAAmC,IAAlC5B,EAAiC,uDAAzB3C,GAAc0F,EAAW,uCAC/C,OAAQA,EAAOpF,MACb,KAAKP,EACH,OAAO,2BACF4C,GADL,IAEEyB,WAAW,IAGf,KAAKrE,EACH,OAAO,2BACF4C,GADL,IAEEyB,WAAW,IAGf,KAAKrE,EACH,OAAO,2BACF4C,GADL,IAEEyB,WAAW,EACXhE,IAAKsF,EAAOnF,UAIhB,KAAKR,EACH,OAAO,2BACF4C,GADL,IAEE1C,YAAY,IAGhB,KAAKF,EACH,OAAO,2BACF4C,GADL,IAEE1C,YAAY,EACZsF,UAAWG,EAAOnF,UAGtB,KAAKR,EACH,OAAO,2BACF4C,GADL,IAEE1C,YAAY,EACZG,IAAKsF,EAAOnF,UAIhB,KAAKR,EACH,OAAO,2BACF4C,GADL,IAEE0B,YAAY,IAGhB,KAAKtE,EACH,OAAO,2BACF4C,GADL,IAEE0B,YAAY,IAGhB,KAAKtE,EACH,OAAO,2BACF4C,GADL,IAEE0B,YAAY,EACZjE,IAAKsF,EAAOnF,UAGhB,QACE,OAAOoC,IK1EXC,SXQa,WAAmC,IAAlCD,EAAiC,uDAAzB3C,EAAc0F,EAAW,uCAC/C,OAAQA,EAAOpF,MACb,KAAKP,EACH,OAAO,2BACF4C,GADL,IAEE1C,YAAY,IAEhB,KAAKF,EACH,OAAO,2BACF4C,GADL,IAEE1C,YAAY,EACZE,OAAQuF,EAAOnF,UAEnB,KAAKR,EACH,OAAO,2BACF4C,GADL,IAEE1C,YAAY,EACZG,IAAKsF,EAAOnF,UAEhB,KAAKR,EACH,OAAO,2BACF4C,GADL,IAEEzC,YAAY,IAEhB,KAAKH,EACH,OAAO,2BACF4C,GADL,IAEEzC,YAAY,IAEhB,KAAKH,EACH,OAAO,2BACF4C,GADL,IAEEzC,YAAY,EACZE,IAAKsF,EAAOnF,UAEhB,QACE,OAAOoC,IW3CXa,mBCNF6E,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,WAAD,CAAUC,MDSC,WACb,IAAMC,EAAc,CAACC,MACfC,EAAqBC,mBAAe,WAAf,EAAmBH,GAO9C,OALcI,uBACZV,GACAW,+BAAoBH,ICfHH,IACf,kBAAC,GAAD,QAGJO,SAASC,eAAe,SFqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhG,MAAK,SAAAiG,GACJA,EAAaC,gBAEdC,OAAM,SAAA3F,GACL4F,QAAQ5F,MAAMA,EAAM6F,c","file":"static/js/main.733891e8.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nexport default () => (\n  <nav>\n    <div className=\"nav-wrapper blue darken-1\">\n      <ul className=\"col s12\">\n        <li>\n          <Link to=\"/\">All images</Link>\n        </li>\n        <li>\n          <Link to=\"/add\">Add image</Link>\n        </li>\n      </ul>\n    </div>\n  </nav>\n);\n","//define actionTypes\n\nconst actionTypes = {\n  GET_IMAGES_REQUEST: \"GET_IMAGES_REQUEST\",\n  GET_IMAGES_SUCCESS: \"GET_IMAGES_SUCCESS\",\n  GET_IMAGES_ERROR: \"GET_IMAGES_ERROR\",\n\n  REMOVE_IMAGE_REQUSET: \"REMOVE_IMAGE_REQUEST\",\n  REMOVE_IMAGE_SUCCESS: \"REMOVE_IMAGE_SUCCESS\",\n  REMOVE_IMAGE_ERROR: \"REMOVE_IMAGE_ERROR\",\n};\n\n//create reducer\n\nconst initialState = {\n  isFetching: false,\n  isRemoving: false,\n  images: null,\n  err: null,\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_IMAGES_REQUEST:\n      return {\n        ...state,\n        isFetching: true,\n      };\n    case actionTypes.GET_IMAGES_SUCCESS:\n      return {\n        ...state,\n        isFetching: false,\n        images: action.payload,\n      };\n    case actionTypes.GET_IMAGES_ERROR:\n      return {\n        ...state,\n        isFetching: false,\n        err: action.payload,\n      };\n    case actionTypes.REMOVE_IMAGE_REQUSET:\n      return {\n        ...state,\n        isRemoving: true,\n      };\n    case actionTypes.REMOVE_IMAGE_SUCCESS:\n      return {\n        ...state,\n        isRemoving: false,\n      };\n    case actionTypes.REMOVE_IMAGE_ERROR:\n      return {\n        ...state,\n        isRemoving: false,\n        err: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n//define actions\n\nexport const actions = {\n  getImageRequest: () => ({\n    type: actionTypes.GET_IMAGES_REQUEST,\n  }),\n  getImageSuccess: (payload) => ({\n    type: actionTypes.GET_IMAGES_SUCCESS,\n    payload,\n  }),\n  getImageError: (payload) => ({\n    type: actionTypes.GET_IMAGES_ERROR,\n    payload,\n  }),\n\n  removeImageRequest: () => ({\n    type: actionTypes.REMOVE_IMAGE_REQUSET,\n  }),\n  removeImageSuccess: () => ({\n    type: actionTypes.REMOVE_IMAGE_SUCCESS,\n  }),\n  removeImageError: (payload) => ({\n    type: actionTypes.REMOVE_IMAGE_ERROR,\n  }),\n};\n","import firebase from \"firebase/app\";\n\nimport \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig: object = {\n  apiKey: \"AIzaSyBbnhKWNReUhU9K-EpCTJh3Yr8Yt00s7bw\",\n  authDomain: \"yalantistest-576f1.firebaseapp.com\",\n  databaseURL: \"https://yalantistest-576f1.firebaseio.com\",\n  projectId: \"yalantistest-576f1\",\n  storageBucket: \"yalantistest-576f1.appspot.com\",\n  messagingSenderId: \"688095118980\",\n  appId: \"1:688095118980:web:cb3bd510e4d075d488e4d1\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import styled from \"styled-components\";\n\nexport const Image = styled.img`\n  max-height: 300px;\n  object-fit: cover;\n`;\n\nexport const Tooltip = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  width: 100%;\n  display: flex;\n  opacity: 0;\n  justify-content: center;\n  left: 0;\n  bottom: 0;\n  align-items: ${(props) => (props.position ? props.position : \"bottom\")};\n  z-index: 10;\n  cursor: pointer;\n  transition: 500ms;\n  :hover {\n    opacity: 1;\n    transition: 500ms;\n  }\n  @media(max-width:991px){\n    opacity:1;\n  }\n`;\n\nexport const TooltipMessage = styled.div`\n  position: absolute;\n  max-height: 100%;\n  overflow: auto;\n  object-fit: cover;\n  width: 100%;\n  padding: 5px 15px;\n  background-color: rgba(255, 255, 255, 0.5);\n  color: ${(props) => (props.color ? props.color : \"black\")};\n  font-size: ${(props) => (props.size ? `${props.size}px` : \"14px\")};\n  text-align: ${(props) => (props.align ? props.align : \"left\")};\n  font-weight: ${(props) => (props.fontWeight ? props.fontWeight : \"400\")};\n`;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Image, Tooltip, TooltipMessage } from \"./styled\";\n\nexport default ({ data, onRemove }) => {\n  return (\n    <div className=\"col s12 m6 l4 relative\">\n      <span\n        href=\"/\"\n        className=\"btn-floating btn-small halfway-fab waves-effect waves-light red\"\n      >\n        <i onClick={() => onRemove(data.id)} className=\"material-icons\">\n          remove\n        </i>\n      </span>\n      <Link to={`edit/${data.id}`}>\n        <div className=\"card\">\n          <div className=\"card-image\">\n            <Image alt=\"i\" src={data.url} />\n\n            <Tooltip position={data.tooltipPosition}>\n              <TooltipMessage\n                fontWeight={700}\n                size={data.fontSize}\n                color={data.textColor}\n                align={data.textPosition}\n              >\n                {data.tooltip}\n              </TooltipMessage>\n            </Tooltip>\n          </div>\n        </div>\n      </Link>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getImages, removeImage } from \"./thunks\";\n\nimport Card from \"./Card\";\n\nconst ImageGrid = ({ getImages, data, removeImage }) => {\n  useEffect(() => {\n    getImages();\n  }, []);\n\n  const _handleRemoveImage = async (id) => {\n    await removeImage(id);\n    await getImages();\n  };\n  return (\n    <div className=\"row\">\n      {data.images &&\n        data.images.map((item) => (\n          <Card onRemove={_handleRemoveImage} key={item.id} data={item} />\n        ))}\n    </div>\n  );\n};\n\nconst mapState = (state) => ({\n  data: state.gridPage,\n});\nconst mapDispatch = (dispatch) => ({\n  getImages: () => dispatch(getImages()),\n  removeImage: (id) => dispatch(removeImage(id)),\n});\n\nexport default connect(mapState, mapDispatch)(ImageGrid);\n","import { actions } from \"./ducks\";\nimport firebase from \"../../firebase\";\nimport { toastr } from \"react-redux-toastr\";\n\n//getting all image items\n\nexport const getImages = () => {\n  return async (dispatch) => {\n    await actions.getImageRequest();\n    const data = [];\n    try {\n      await firebase\n        .firestore()\n        .collection(\"images\")\n        .get()\n        .then((querySnapshot) => {\n          querySnapshot.forEach((doc) => {\n            data.push({ ...doc.data(), id: doc.id });\n          });\n        });\n      await dispatch(actions.getImageSuccess(data));\n      await toastr.success(\"Success\", \"Image loading from server\");\n    } catch (err) {\n      await dispatch(actions.getImageError(err.toString()));\n      await toastr.error(\"Error\", err.toString());\n    }\n  };\n};\n\n//using for removing images\n\nexport const removeImage = (id) => {\n  return async (dispatch) => {\n    await actions.removeImageRequest();\n    try {\n      await firebase.firestore().collection(\"images\").doc(id).delete();\n\n      await dispatch(actions.removeImageSuccess());\n      await toastr.success(\"Success\", \"Image removing from server\");\n    } catch (err) {\n      await dispatch(actions.removeImageError(err.toString()));\n      await toastr.error(\"Error\", err.toString());\n    }\n  };\n};\n","//define actionTypes\n\nconst actionTypes = {\n  ADD_IMAGE_REQUEST: \"ADD_IMAGE_REQUEST\",\n  ADD_IMAGE_SUCCESS: \"ADD_IMAGE_SUCCESS\",\n  ADD_IMAGE_ERROR: \"ADD_IMAGE_ERROR\",\n\n  UPDATE_IMAGE_REQUEST: \"UPDATE_IMAGE_REQUEST\",\n  UPDATE_IMAGE_SUCCESS: \"UPDATE_IMAGE_SUCCESS\",\n  UPDATE_IMAGE_ERROR: \"UPDATE_IMAGE_ERROR\",\n\n  GET_IMAGE_REQUEST: \"GET_IMAGE_REQUEST\",\n  GET_IMAGE_SUCCESS: \"GET_IMAGE_SUCCESS\",\n  GET_IMAGE_ERROR: \"GET_IMAGE_ERROR\",\n};\n\n//create reducer\n\nconst initialState = {\n  isPending: false,\n  isUpdating: false,\n  isFetching: false,\n  err: null,\n};\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_IMAGE_REQUEST: {\n      return {\n        ...state,\n        isPending: true,\n      };\n    }\n    case actionTypes.ADD_IMAGE_SUCCESS: {\n      return {\n        ...state,\n        isPending: false,\n      };\n    }\n    case actionTypes.ADD_IMAGE_ERROR: {\n      return {\n        ...state,\n        isPending: false,\n        err: action.payload,\n      };\n    }\n\n    case actionTypes.GET_IMAGE_REQUEST: {\n      return {\n        ...state,\n        isFetching: true,\n      };\n    }\n    case actionTypes.GET_IMAGE_SUCCESS: {\n      return {\n        ...state,\n        isFetching: false,\n        imageData: action.payload,\n      };\n    }\n    case actionTypes.GET_IMAGE_ERROR: {\n      return {\n        ...state,\n        isFetching: false,\n        err: action.payload,\n      };\n    }\n\n    case actionTypes.UPDATE_IMAGE_REQUEST: {\n      return {\n        ...state,\n        isUpdating: true,\n      };\n    }\n    case actionTypes.UPDATE_IMAGE_SUCCESS: {\n      return {\n        ...state,\n        isUpdating: false,\n      };\n    }\n    case actionTypes.UPDATE_IMAGE_ERROR: {\n      return {\n        ...state,\n        isUpdating: false,\n        err: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\n//define actions\n\nexport const actions = {\n  addImageRequest: () => ({\n    type: actionTypes.ADD_IMAGE_REQUEST,\n  }),\n  addImageSuccess: () => ({\n    type: actionTypes.ADD_IMAGE_SUCCESS,\n  }),\n  addImageError: (payload) => ({\n    type: actionTypes.ADD_IMAGE_ERROR,\n    payload,\n  }),\n\n  getImageRequest: () => ({\n    type: actionTypes.GET_IMAGE_REQUEST,\n  }),\n  getImageSuccess: (payload) => ({\n    type: actionTypes.GET_IMAGE_SUCCESS,\n    payload,\n  }),\n  getImageError: (payload) => ({\n    type: actionTypes.GET_IMAGE_ERROR,\n    payload,\n  }),\n\n  updateImageRequest: () => ({\n    type: actionTypes.ADD_IMAGE_REQUEST,\n  }),\n  updateImageSuccess: () => ({\n    type: actionTypes.ADD_IMAGE_SUCCESS,\n  }),\n  updateImageError: (payload) => ({\n    type: actionTypes.ADD_IMAGE_ERROR,\n    payload,\n  }),\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport { TwitterPicker } from \"react-color\";\nimport { addImage, updateImage, getImage } from \"./thunks\";\n\nimport { connect } from \"react-redux\";\nimport { toastr } from \"react-redux-toastr\";\n\nconst Form = ({ addImage, imageUploadData, updateImage, getImage }) => {\n  //state\n  const [tooltip, setTooltip] = useState(\"Set image tooltip\");\n  const [tooltipPosition, setTooltipPosition] = useState(\"flex-end\");\n  const [textPosition, setTextPosition] = useState(\"left\");\n  const [image, setImage] = useState(\"\");\n  const [fontSize, setFontSize] = useState(14);\n  const [textColor, setTextColor] = useState(\"000\");\n\n  const history = useHistory();\n\n  //if id update image\n  const { id } = useParams();\n  const imageData = imageUploadData.imageData;\n\n  useEffect(() => {\n    if (id) {\n      getImage(id);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (imageData && id) {\n      setTooltip(imageData.tooltip);\n      setTooltipPosition(imageData.tooltipPosition);\n      setTextPosition(imageData.textPosition);\n      setImage(imageData.url);\n      setFontSize(imageData.fontSize);\n      setTextColor(imageData.textColor);\n    }\n  }, [imageData]);\n\n  //file input handler\n  const _handleAddImage = (file) => {\n    if (file) {\n      const FR = new FileReader();\n\n      if ((file && file.type === \"image/jpeg\") || file.type === \"image/png\") {\n        FR.readAsDataURL(file);\n        FR.addEventListener(\n          \"load\",\n          () => {\n            setImage(FR.result);\n          },\n          false\n        );\n      } else {\n        toastr.error(\"Error\", \"Supported jpg and png images \");\n      }\n    }\n  };\n\n  const _handleSetTooltip = (e) => {\n    setTooltip(e.currentTarget.value);\n  };\n\n  const _handleSetFontSize = (size) => {\n    const parsedSize = parseInt(size);\n    parsedSize > 0 ? setFontSize(parsedSize) : setFontSize(14);\n  };\n\n  const _handleChangeColor = (color) => {\n    setTextColor(color.hex);\n  };\n\n  //if id is valid, then update the value otherwise create a new\n\n  const _handleSubmit = async () => {\n    if (image.length > 0 && tooltip.length > 0 && !id) {\n      await addImage({\n        url: image,\n        tooltip,\n        tooltipPosition,\n        textPosition,\n        textColor,\n        fontSize,\n      });\n      await history.push(\"/\");\n    } else if (id) {\n      await updateImage({\n        url: image,\n        tooltip,\n        tooltipPosition,\n        textPosition,\n        textColor,\n        fontSize,\n        id,\n      });\n      await history.push(\"/\");\n    } else {\n      await toastr.error(\"Error\", \"complete form\");\n    }\n  };\n  return (\n    <div className=\"row\">\n      <div className=\"row\">\n        <h4 className=\"center\">{id ? \"Update \" : \"Add \"}image with tooltip</h4>\n      </div>\n      <form className=\"col s12\" action=\"#\">\n        <div className=\"row\">\n          <h6>Image</h6>\n          <div className=\"file-field input-field\">\n            <div className=\"btn\">\n              <span>File</span>\n              <input\n                onChange={(e) => _handleAddImage(e.target.files[0])}\n                type=\"file\"\n              />\n            </div>\n            <div className=\"file-path-wrapper\">\n              <input\n                className=\"file-path validate\"\n                type=\"text\"\n                placeholder=\"file name\"\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <input\n              type=\"text\"\n              className=\"validate\"\n              value={tooltip}\n              onChange={(e) => _handleSetTooltip(e)}\n              name=\"tooltip-input\"\n            />\n            <label htmlFor=\"tooltip-input\" className=\"active\">\n              Tooltip\n            </label>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <h6>Tooltip position</h6>\n          <p>\n            <label>\n              <input\n                type=\"radio\"\n                onChange={() => setTooltipPosition(\"flex-start\")}\n                checked={tooltipPosition === \"flex-start\"}\n              />\n              <span>Top</span>\n            </label>\n          </p>\n          <p>\n            <label>\n              <input\n                type=\"radio\"\n                onChange={() => setTooltipPosition(\"center\")}\n                checked={tooltipPosition === \"center\"}\n              />\n              <span>Center</span>\n            </label>\n          </p>\n          <p>\n            <label>\n              <input\n                type=\"radio\"\n                onChange={() => setTooltipPosition(\"flex-end\")}\n                checked={tooltipPosition === \"flex-end\"}\n              />\n              <span>Bottom</span>\n            </label>\n          </p>\n        </div>\n        <div className=\"row\">\n          <div className=\"input-field col s12\">\n            <input\n              name=\"font-input\"\n              type=\"number\"\n              min=\"1\"\n              value={fontSize}\n              className=\"validate\"\n              onChange={(e) => _handleSetFontSize(e.target.value)}\n            />\n            <label htmlFor=\"font-input\" className=\"active\">\n              Font size (px) min 1\n            </label>\n          </div>\n        </div>\n        <div className=\"row\">\n          <h6>Text alignment</h6>\n          <p>\n            <label>\n              <input\n                type=\"radio\"\n                onChange={() => setTextPosition(\"left\")}\n                checked={textPosition === \"left\"}\n              />\n              <span>Left</span>\n            </label>\n          </p>\n          <p>\n            <label>\n              <input\n                type=\"radio\"\n                onChange={() => setTextPosition(\"center\")}\n                checked={textPosition === \"center\"}\n              />\n              <span>Center</span>\n            </label>\n          </p>\n          <p>\n            <label>\n              <input\n                type=\"radio\"\n                onChange={() => setTextPosition(\"right\")}\n                checked={textPosition === \"right\"}\n              />\n              <span>Right</span>\n            </label>\n          </p>\n        </div>\n      </form>\n      <div className=\"row\">\n        <h6>Text color</h6>\n        <TwitterPicker color={textColor} onChange={_handleChangeColor} />\n      </div>\n      <div className=\"row center\">\n        <button\n          className=\"btn btn-large waves-effect waves-light\"\n          type=\"submit\"\n          onClick={_handleSubmit}\n        >\n          Submit\n          <i className=\"material-icons right\">send</i>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nconst mapState = (state) => ({\n  imageUploadData: state.addImage,\n});\n\nconst mapDispatch = (dispatch) => ({\n  addImage: (data) => dispatch(addImage(data)),\n  getImage: (id) => dispatch(getImage(id)),\n  updateImage: (data) => dispatch(updateImage(data)),\n});\n\nexport default connect(mapState, mapDispatch)(Form);\n","import { actions } from \"./ducks\";\nimport firebase from \"firebase\";\nimport { toastr } from \"react-redux-toastr\";\n\n//using for adding new image\n\nexport const addImage = (data) => {\n  return async (dispatch) => {\n    await dispatch(actions.addImageRequest());\n\n    try {\n      await firebase.firestore().collection(\"images\").add(data);\n      await dispatch(actions.addImageSuccess());\n      await toastr.success(\"Success\", \"Image uploading on server\");\n    } catch (err) {\n      await dispatch(actions.addImageError(err.toString()));\n      await toastr.error(\"Error\", err.toString());\n    }\n  };\n};\n\n//using for getting image once\n\nexport const getImage = (id) => {\n  return async (dispatch) => {\n    await dispatch(actions.getImageRequest());\n    let data;\n    try {\n      await firebase\n        .firestore()\n        .collection(\"images\")\n        .doc(id)\n        .get()\n        .then((doc) => (data = doc.data()));\n\n      await dispatch(actions.getImageSuccess(data));\n      await toastr.success(\"Success\", \"Image is uploading\");\n    } catch (err) {\n      await dispatch(actions.getImageError(err.toString()));\n      await toastr.error(\"Error\", err.toString());\n    }\n  };\n};\n\n//using for update images\n\nexport const updateImage = (data) => {\n  return async (dispatch) => {\n    await dispatch(actions.updateImageRequest());\n    try {\n      await firebase.firestore().collection(\"images\").doc(data.id).update(data);\n      await dispatch(actions.updateImageSuccess());\n      await toastr.success(\"Success\", \"Image is updating\");\n    } catch (err) {\n      await dispatch(actions.updateImageError(err.toString()));\n      await toastr.error(\"Error\", err.toString());\n    }\n  };\n};\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport ReduxToastr from \"react-redux-toastr\";\n\nimport Navbar from \"components/Navbar\";\nimport ImageGrid from \"components/ImageGrid\";\nimport Form from \"components/Form\";\n\nfunction App() {\n  return (\n    <>\n      <ReduxToastr\n        timeOut={2000}\n        newestOnTop={false}\n        preventDuplicates\n        position=\"bottom-left\"\n        getState={(state) => state.toastr} // This is the default\n        transitionIn=\"fadeIn\"\n        transitionOut=\"fadeOut\"\n        progressBar\n        closeOnToastrClick\n      />\n      <Router>\n        <Navbar />\n        <div className=\"row\">\n          <div className=\"container\">\n            <Switch>\n              <Route path=\"/\" exact>\n                <ImageGrid />\n              </Route>\n              <Route path=\"/add\">\n                <Form />\n              </Route>\n              <Route path=\"/edit/:id\" exact>\n                <Form />\n              </Route>\n            </Switch>\n          </div>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport addImageReducer from \"components/Form/ducks\";\nimport gridPageReducer from \"components/ImageGrid/ducks\";\n\nimport { reducer as toastr } from \"react-redux-toastr\";\n\n//create root reducer\n\nconst rootReducer = combineReducers({\n  addImage: addImageReducer,\n  gridPage: gridPageReducer,\n  toastr,\n});\n\n//create store\n\nexport default function configureStore() {\n  const middlewares = [thunkMiddleware];\n  const middleWareEnhancer = applyMiddleware(...middlewares);\n\n  const store = createStore(\n    rootReducer,\n    composeWithDevTools(middleWareEnhancer)\n  );\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"index.css\";\nimport App from \"App\";\nimport * as serviceWorker from \"serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store()}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}